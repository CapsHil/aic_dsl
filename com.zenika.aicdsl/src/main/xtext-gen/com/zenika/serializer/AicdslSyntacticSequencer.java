/*
 * generated by Xtext 2.10.0
 */
package com.zenika.serializer;

import com.google.inject.Inject;
import com.zenika.services.AicdslGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class AicdslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected AicdslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Action_ScreenshotParserRuleCall_1_or_StopParserRuleCall_3;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (AicdslGrammarAccess) access;
		match_Action_ScreenshotParserRuleCall_1_or_StopParserRuleCall_3 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getActionAccess().getScreenshotParserRuleCall_1()), new TokenAlias(false, false, grammarAccess.getActionAccess().getStopParserRuleCall_3()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getScreenshotRule())
			return getScreenshotToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getStopRule())
			return getStopToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Screenshot:
	 * 	"Take a screenshot"
	 * ;
	 */
	protected String getScreenshotToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "Take a screenshot";
	}
	
	/**
	 * Stop:
	 * 	"Kill application"
	 * ;
	 */
	protected String getStopToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "Kill application";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Action_ScreenshotParserRuleCall_1_or_StopParserRuleCall_3.equals(syntax))
				emit_Action_ScreenshotParserRuleCall_1_or_StopParserRuleCall_3(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     Screenshot | Stop
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Action_ScreenshotParserRuleCall_1_or_StopParserRuleCall_3(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
