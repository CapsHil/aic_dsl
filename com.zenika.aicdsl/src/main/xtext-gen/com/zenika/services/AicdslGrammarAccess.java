/*
 * generated by Xtext 2.10.0
 */
package com.zenika.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AicdslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DslElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zenika.Aicdsl.Dsl");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsTypeParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Dsl:
		//	elements+=Type*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Type*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Type
		public RuleCall getElementsTypeParserRuleCall_0() { return cElementsTypeParserRuleCall_0; }
	}
	public class FLOATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zenika.Aicdsl.FLOAT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FLOAT ecore::EFloat:
		//	INT ('.' INT)?
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT)?
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//('.' INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zenika.Aicdsl.Type");
		private final RuleCall cFeatureParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Type:
		//	Feature;
		@Override public ParserRule getRule() { return rule; }
		
		//Feature
		public RuleCall getFeatureParserRuleCall() { return cFeatureParserRuleCall; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zenika.Aicdsl.Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Assignment cScenariosAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cScenariosScenarioParserRuleCall_2_0 = (RuleCall)cScenariosAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Feature:
		//	'Feature: ' title=STRING?
		//	scenarios+=Scenario+
		//	'End';
		@Override public ParserRule getRule() { return rule; }
		
		//'Feature: ' title=STRING? scenarios+=Scenario+ 'End'
		public Group getGroup() { return cGroup; }
		
		//'Feature: '
		public Keyword getFeatureKeyword_0() { return cFeatureKeyword_0; }
		
		//title=STRING?
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_1_0() { return cTitleSTRINGTerminalRuleCall_1_0; }
		
		//scenarios+=Scenario+
		public Assignment getScenariosAssignment_2() { return cScenariosAssignment_2; }
		
		//Scenario
		public RuleCall getScenariosScenarioParserRuleCall_2_0() { return cScenariosScenarioParserRuleCall_2_0; }
		
		//'End'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}
	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zenika.Aicdsl.Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Assignment cActionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionsActionParserRuleCall_2_0 = (RuleCall)cActionsAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Scenario:
		//	'Scenario: ' title=STRING?
		//	actions+=Action+
		//	'End';
		@Override public ParserRule getRule() { return rule; }
		
		//'Scenario: ' title=STRING? actions+=Action+ 'End'
		public Group getGroup() { return cGroup; }
		
		//'Scenario: '
		public Keyword getScenarioKeyword_0() { return cScenarioKeyword_0; }
		
		//title=STRING?
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_1_0() { return cTitleSTRINGTerminalRuleCall_1_0; }
		
		//actions+=Action+
		public Assignment getActionsAssignment_2() { return cActionsAssignment_2; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_2_0() { return cActionsActionParserRuleCall_2_0; }
		
		//'End'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zenika.Aicdsl.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScreenshotParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClickParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStopParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRunParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBatteryParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cGpsParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Action:
		//	Sensor | Screenshot | Click | Stop | Run | Battery | Gps;
		@Override public ParserRule getRule() { return rule; }
		
		//Sensor | Screenshot | Click | Stop | Run | Battery | Gps
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sensor
		public RuleCall getSensorParserRuleCall_0() { return cSensorParserRuleCall_0; }
		
		//Screenshot
		public RuleCall getScreenshotParserRuleCall_1() { return cScreenshotParserRuleCall_1; }
		
		//Click
		public RuleCall getClickParserRuleCall_2() { return cClickParserRuleCall_2; }
		
		//Stop
		public RuleCall getStopParserRuleCall_3() { return cStopParserRuleCall_3; }
		
		//Run
		public RuleCall getRunParserRuleCall_4() { return cRunParserRuleCall_4; }
		
		//Battery
		public RuleCall getBatteryParserRuleCall_5() { return cBatteryParserRuleCall_5; }
		
		//Gps
		public RuleCall getGpsParserRuleCall_6() { return cGpsParserRuleCall_6; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zenika.Aicdsl.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSensorNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSensorNameIDTerminalRuleCall_1_0 = (RuleCall)cSensorNameAssignment_1.eContents().get(0);
		private final Keyword cAtKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueINTTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Assignment cTitleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTitleScenarioCrossReference_4_0 = (CrossReference)cTitleAssignment_4.eContents().get(0);
		private final RuleCall cTitleScenarioSTRINGTerminalRuleCall_4_0_1 = (RuleCall)cTitleScenarioCrossReference_4_0.eContents().get(1);
		
		//Sensor:
		//	'Set sensor' sensorName=ID 'at' value=INT
		//	title=[Scenario|STRING]?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Set sensor' sensorName=ID 'at' value=INT title=[Scenario|STRING]?
		public Group getGroup() { return cGroup; }
		
		//'Set sensor'
		public Keyword getSetSensorKeyword_0() { return cSetSensorKeyword_0; }
		
		//sensorName=ID
		public Assignment getSensorNameAssignment_1() { return cSensorNameAssignment_1; }
		
		//ID
		public RuleCall getSensorNameIDTerminalRuleCall_1_0() { return cSensorNameIDTerminalRuleCall_1_0; }
		
		//'at'
		public Keyword getAtKeyword_2() { return cAtKeyword_2; }
		
		//value=INT
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_3_0() { return cValueINTTerminalRuleCall_3_0; }
		
		//title=[Scenario|STRING]?
		public Assignment getTitleAssignment_4() { return cTitleAssignment_4; }
		
		//[Scenario|STRING]
		public CrossReference getTitleScenarioCrossReference_4_0() { return cTitleScenarioCrossReference_4_0; }
		
		//STRING
		public RuleCall getTitleScenarioSTRINGTerminalRuleCall_4_0_1() { return cTitleScenarioSTRINGTerminalRuleCall_4_0_1; }
	}
	public class BatteryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zenika.Aicdsl.Battery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetBatteryLevelAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Battery:
		//	"Set battery level at" value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"Set battery level at" value=INT
		public Group getGroup() { return cGroup; }
		
		//"Set battery level at"
		public Keyword getSetBatteryLevelAtKeyword_0() { return cSetBatteryLevelAtKeyword_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class GpsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zenika.Aicdsl.Gps");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetGpsPositionAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLatFLOATParserRuleCall_1_0 = (RuleCall)cLatAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLonAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLonFLOATParserRuleCall_3_0 = (RuleCall)cLonAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAltiAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAltiFLOATParserRuleCall_5_0 = (RuleCall)cAltiAssignment_5.eContents().get(0);
		
		//Gps:
		//	"Set Gps position at" lat=FLOAT "," lon=FLOAT "," alti=FLOAT;
		@Override public ParserRule getRule() { return rule; }
		
		//"Set Gps position at" lat=FLOAT "," lon=FLOAT "," alti=FLOAT
		public Group getGroup() { return cGroup; }
		
		//"Set Gps position at"
		public Keyword getSetGpsPositionAtKeyword_0() { return cSetGpsPositionAtKeyword_0; }
		
		//lat=FLOAT
		public Assignment getLatAssignment_1() { return cLatAssignment_1; }
		
		//FLOAT
		public RuleCall getLatFLOATParserRuleCall_1_0() { return cLatFLOATParserRuleCall_1_0; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//lon=FLOAT
		public Assignment getLonAssignment_3() { return cLonAssignment_3; }
		
		//FLOAT
		public RuleCall getLonFLOATParserRuleCall_3_0() { return cLonFLOATParserRuleCall_3_0; }
		
		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//alti=FLOAT
		public Assignment getAltiAssignment_5() { return cAltiAssignment_5; }
		
		//FLOAT
		public RuleCall getAltiFLOATParserRuleCall_5_0() { return cAltiFLOATParserRuleCall_5_0; }
	}
	public class ScreenshotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zenika.Aicdsl.Screenshot");
		private final Keyword cTakeAScreenshotKeyword = (Keyword)rule.eContents().get(1);
		
		//Screenshot:
		//	"Take a screenshot";
		@Override public ParserRule getRule() { return rule; }
		
		//"Take a screenshot"
		public Keyword getTakeAScreenshotKeyword() { return cTakeAScreenshotKeyword; }
	}
	public class ClickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zenika.Aicdsl.Click");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClickOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cButtonNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cButtonNameIDTerminalRuleCall_1_0 = (RuleCall)cButtonNameAssignment_1.eContents().get(0);
		private final Keyword cButtonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Click:
		//	"Click on " buttonName=ID " button";
		@Override public ParserRule getRule() { return rule; }
		
		//"Click on " buttonName=ID " button"
		public Group getGroup() { return cGroup; }
		
		//"Click on "
		public Keyword getClickOnKeyword_0() { return cClickOnKeyword_0; }
		
		//buttonName=ID
		public Assignment getButtonNameAssignment_1() { return cButtonNameAssignment_1; }
		
		//ID
		public RuleCall getButtonNameIDTerminalRuleCall_1_0() { return cButtonNameIDTerminalRuleCall_1_0; }
		
		//" button"
		public Keyword getButtonKeyword_2() { return cButtonKeyword_2; }
	}
	public class StopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zenika.Aicdsl.Stop");
		private final Keyword cKillApplicationKeyword = (Keyword)rule.eContents().get(1);
		
		//Stop:
		//	"Kill application";
		@Override public ParserRule getRule() { return rule; }
		
		//"Kill application"
		public Keyword getKillApplicationKeyword() { return cKillApplicationKeyword; }
	}
	public class RunElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zenika.Aicdsl.Run");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRunKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAppNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAppNameIDTerminalRuleCall_1_0 = (RuleCall)cAppNameAssignment_1.eContents().get(0);
		
		//Run:
		//	"Run" appName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"Run" appName=ID
		public Group getGroup() { return cGroup; }
		
		//"Run"
		public Keyword getRunKeyword_0() { return cRunKeyword_0; }
		
		//appName=ID
		public Assignment getAppNameAssignment_1() { return cAppNameAssignment_1; }
		
		//ID
		public RuleCall getAppNameIDTerminalRuleCall_1_0() { return cAppNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final DslElements pDsl;
	private final FLOATElements pFLOAT;
	private final TypeElements pType;
	private final FeatureElements pFeature;
	private final ScenarioElements pScenario;
	private final ActionElements pAction;
	private final SensorElements pSensor;
	private final BatteryElements pBattery;
	private final GpsElements pGps;
	private final ScreenshotElements pScreenshot;
	private final ClickElements pClick;
	private final StopElements pStop;
	private final RunElements pRun;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AicdslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDsl = new DslElements();
		this.pFLOAT = new FLOATElements();
		this.pType = new TypeElements();
		this.pFeature = new FeatureElements();
		this.pScenario = new ScenarioElements();
		this.pAction = new ActionElements();
		this.pSensor = new SensorElements();
		this.pBattery = new BatteryElements();
		this.pGps = new GpsElements();
		this.pScreenshot = new ScreenshotElements();
		this.pClick = new ClickElements();
		this.pStop = new StopElements();
		this.pRun = new RunElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.zenika.Aicdsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Dsl:
	//	elements+=Type*;
	public DslElements getDslAccess() {
		return pDsl;
	}
	
	public ParserRule getDslRule() {
		return getDslAccess().getRule();
	}
	
	//FLOAT ecore::EFloat:
	//	INT ('.' INT)?
	public FLOATElements getFLOATAccess() {
		return pFLOAT;
	}
	
	public ParserRule getFLOATRule() {
		return getFLOATAccess().getRule();
	}
	
	//Type:
	//	Feature;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Feature:
	//	'Feature: ' title=STRING?
	//	scenarios+=Scenario+
	//	'End';
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//Scenario:
	//	'Scenario: ' title=STRING?
	//	actions+=Action+
	//	'End';
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}
	
	//Action:
	//	Sensor | Screenshot | Click | Stop | Run | Battery | Gps;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Sensor:
	//	'Set sensor' sensorName=ID 'at' value=INT
	//	title=[Scenario|STRING]?;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//Battery:
	//	"Set battery level at" value=INT;
	public BatteryElements getBatteryAccess() {
		return pBattery;
	}
	
	public ParserRule getBatteryRule() {
		return getBatteryAccess().getRule();
	}
	
	//Gps:
	//	"Set Gps position at" lat=FLOAT "," lon=FLOAT "," alti=FLOAT;
	public GpsElements getGpsAccess() {
		return pGps;
	}
	
	public ParserRule getGpsRule() {
		return getGpsAccess().getRule();
	}
	
	//Screenshot:
	//	"Take a screenshot";
	public ScreenshotElements getScreenshotAccess() {
		return pScreenshot;
	}
	
	public ParserRule getScreenshotRule() {
		return getScreenshotAccess().getRule();
	}
	
	//Click:
	//	"Click on " buttonName=ID " button";
	public ClickElements getClickAccess() {
		return pClick;
	}
	
	public ParserRule getClickRule() {
		return getClickAccess().getRule();
	}
	
	//Stop:
	//	"Kill application";
	public StopElements getStopAccess() {
		return pStop;
	}
	
	public ParserRule getStopRule() {
		return getStopAccess().getRule();
	}
	
	//Run:
	//	"Run" appName=ID;
	public RunElements getRunAccess() {
		return pRun;
	}
	
	public ParserRule getRunRule() {
		return getRunAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
