/*
 * generated by Xtext 2.10.0
 */
grammar InternalAicdsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.zenika.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.zenika.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.zenika.services.AicdslGrammarAccess;

}

@parser::members {

 	private AicdslGrammarAccess grammarAccess;

    public InternalAicdslParser(TokenStream input, AicdslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Dsl";
   	}

   	@Override
   	protected AicdslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDsl
entryRuleDsl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDslRule()); }
	iv_ruleDsl=ruleDsl
	{ $current=$iv_ruleDsl.current; }
	EOF;

// Rule Dsl
ruleDsl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDslAccess().getElementsTypeParserRuleCall_0());
			}
			lv_elements_0_0=ruleType
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDslRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"com.zenika.Aicdsl.Type");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleFLOAT
entryRuleFLOAT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFLOATRule()); }
	iv_ruleFLOAT=ruleFLOAT
	{ $current=$iv_ruleFLOAT.current.getText(); }
	EOF;

// Rule FLOAT
ruleFLOAT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getFLOATAccess().getINTTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFLOATAccess().getFullStopKeyword_1_0());
			}
			this_INT_2=RULE_INT
			{
				$current.merge(this_INT_2);
			}
			{
				newLeafNode(this_INT_2, grammarAccess.getFLOATAccess().getINTTerminalRuleCall_1_1());
			}
		)?
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getTypeAccess().getFeatureParserRuleCall());
	}
	this_Feature_0=ruleFeature
	{
		$current = $this_Feature_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	iv_ruleFeature=ruleFeature
	{ $current=$iv_ruleFeature.current; }
	EOF;

// Rule Feature
ruleFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Feature: '
		{
			newLeafNode(otherlv_0, grammarAccess.getFeatureAccess().getFeatureKeyword_0());
		}
		(
			(
				lv_title_1_0=RULE_STRING
				{
					newLeafNode(lv_title_1_0, grammarAccess.getFeatureAccess().getTitleSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFeatureRule());
					}
					setWithLastConsumed(
						$current,
						"title",
						lv_title_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFeatureAccess().getScenariosScenarioParserRuleCall_2_0());
				}
				lv_scenarios_2_0=ruleScenario
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeatureRule());
					}
					add(
						$current,
						"scenarios",
						lv_scenarios_2_0,
						"com.zenika.Aicdsl.Scenario");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='End'
		{
			newLeafNode(otherlv_3, grammarAccess.getFeatureAccess().getEndKeyword_3());
		}
	)
;

// Entry rule entryRuleScenario
entryRuleScenario returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScenarioRule()); }
	iv_ruleScenario=ruleScenario
	{ $current=$iv_ruleScenario.current; }
	EOF;

// Rule Scenario
ruleScenario returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Scenario: '
		{
			newLeafNode(otherlv_0, grammarAccess.getScenarioAccess().getScenarioKeyword_0());
		}
		(
			(
				lv_title_1_0=RULE_STRING
				{
					newLeafNode(lv_title_1_0, grammarAccess.getScenarioAccess().getTitleSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScenarioRule());
					}
					setWithLastConsumed(
						$current,
						"title",
						lv_title_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getScenarioAccess().getActionsActionParserRuleCall_2_0());
				}
				lv_actions_2_0=ruleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScenarioRule());
					}
					add(
						$current,
						"actions",
						lv_actions_2_0,
						"com.zenika.Aicdsl.Action");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='End'
		{
			newLeafNode(otherlv_3, grammarAccess.getScenarioAccess().getEndKeyword_3());
		}
	)
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getActionAccess().getSensorParserRuleCall_0());
		}
		this_Sensor_0=ruleSensor
		{
			$current = $this_Sensor_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionAccess().getScreenshotParserRuleCall_1());
		}
		ruleScreenshot
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionAccess().getClickParserRuleCall_2());
		}
		this_Click_2=ruleClick
		{
			$current = $this_Click_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionAccess().getStopParserRuleCall_3());
		}
		ruleStop
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionAccess().getRunParserRuleCall_4());
		}
		this_Run_4=ruleRun
		{
			$current = $this_Run_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionAccess().getBatteryParserRuleCall_5());
		}
		this_Battery_5=ruleBattery
		{
			$current = $this_Battery_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionAccess().getGpsParserRuleCall_6());
		}
		this_Gps_6=ruleGps
		{
			$current = $this_Gps_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSensor
entryRuleSensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSensorRule()); }
	iv_ruleSensor=ruleSensor
	{ $current=$iv_ruleSensor.current; }
	EOF;

// Rule Sensor
ruleSensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Set sensor'
		{
			newLeafNode(otherlv_0, grammarAccess.getSensorAccess().getSetSensorKeyword_0());
		}
		(
			(
				lv_sensorName_1_0=RULE_ID
				{
					newLeafNode(lv_sensorName_1_0, grammarAccess.getSensorAccess().getSensorNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSensorRule());
					}
					setWithLastConsumed(
						$current,
						"sensorName",
						lv_sensorName_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='at'
		{
			newLeafNode(otherlv_2, grammarAccess.getSensorAccess().getAtKeyword_2());
		}
		(
			(
				lv_value_3_0=RULE_INT
				{
					newLeafNode(lv_value_3_0, grammarAccess.getSensorAccess().getValueINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSensorRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSensorRule());
					}
				}
				otherlv_4=RULE_STRING
				{
					newLeafNode(otherlv_4, grammarAccess.getSensorAccess().getTitleScenarioCrossReference_4_0());
				}
			)
		)?
	)
;

// Entry rule entryRuleBattery
entryRuleBattery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBatteryRule()); }
	iv_ruleBattery=ruleBattery
	{ $current=$iv_ruleBattery.current; }
	EOF;

// Rule Battery
ruleBattery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Set battery level at'
		{
			newLeafNode(otherlv_0, grammarAccess.getBatteryAccess().getSetBatteryLevelAtKeyword_0());
		}
		(
			(
				lv_value_1_0=RULE_INT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getBatteryAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBatteryRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleGps
entryRuleGps returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGpsRule()); }
	iv_ruleGps=ruleGps
	{ $current=$iv_ruleGps.current; }
	EOF;

// Rule Gps
ruleGps returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Set Gps position at'
		{
			newLeafNode(otherlv_0, grammarAccess.getGpsAccess().getSetGpsPositionAtKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGpsAccess().getLatFLOATParserRuleCall_1_0());
				}
				lv_lat_1_0=ruleFLOAT
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGpsRule());
					}
					set(
						$current,
						"lat",
						lv_lat_1_0,
						"com.zenika.Aicdsl.FLOAT");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getGpsAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGpsAccess().getLonFLOATParserRuleCall_3_0());
				}
				lv_lon_3_0=ruleFLOAT
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGpsRule());
					}
					set(
						$current,
						"lon",
						lv_lon_3_0,
						"com.zenika.Aicdsl.FLOAT");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getGpsAccess().getCommaKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGpsAccess().getAltiFLOATParserRuleCall_5_0());
				}
				lv_alti_5_0=ruleFLOAT
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGpsRule());
					}
					set(
						$current,
						"alti",
						lv_alti_5_0,
						"com.zenika.Aicdsl.FLOAT");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleScreenshot
entryRuleScreenshot returns [String current=null]:
	{ newCompositeNode(grammarAccess.getScreenshotRule()); }
	iv_ruleScreenshot=ruleScreenshot
	{ $current=$iv_ruleScreenshot.current.getText(); }
	EOF;

// Rule Screenshot
ruleScreenshot returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Take a screenshot'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getScreenshotAccess().getTakeAScreenshotKeyword());
	}
;

// Entry rule entryRuleClick
entryRuleClick returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClickRule()); }
	iv_ruleClick=ruleClick
	{ $current=$iv_ruleClick.current; }
	EOF;

// Rule Click
ruleClick returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Click on '
		{
			newLeafNode(otherlv_0, grammarAccess.getClickAccess().getClickOnKeyword_0());
		}
		(
			(
				lv_buttonName_1_0=RULE_ID
				{
					newLeafNode(lv_buttonName_1_0, grammarAccess.getClickAccess().getButtonNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClickRule());
					}
					setWithLastConsumed(
						$current,
						"buttonName",
						lv_buttonName_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=' button'
		{
			newLeafNode(otherlv_2, grammarAccess.getClickAccess().getButtonKeyword_2());
		}
	)
;

// Entry rule entryRuleStop
entryRuleStop returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStopRule()); }
	iv_ruleStop=ruleStop
	{ $current=$iv_ruleStop.current.getText(); }
	EOF;

// Rule Stop
ruleStop returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Kill application'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getStopAccess().getKillApplicationKeyword());
	}
;

// Entry rule entryRuleRun
entryRuleRun returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRunRule()); }
	iv_ruleRun=ruleRun
	{ $current=$iv_ruleRun.current; }
	EOF;

// Rule Run
ruleRun returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Run'
		{
			newLeafNode(otherlv_0, grammarAccess.getRunAccess().getRunKeyword_0());
		}
		(
			(
				lv_appName_1_0=RULE_ID
				{
					newLeafNode(lv_appName_1_0, grammarAccess.getRunAccess().getAppNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRunRule());
					}
					setWithLastConsumed(
						$current,
						"appName",
						lv_appName_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
